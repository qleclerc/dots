create_dots = function(num=10){
  
  id = c(1:num)
  x = rep(0,num)
  y = rep(0,num)
  status = rep("S",num)
  gen_inf = rep(-1,num)
  gen_rec = rep(-1,num)
  data = as.data.frame(cbind(id,x,y,status,gen_inf,gen_rec),stringsAsFactors=FALSE)
  data$x = as.numeric(data$x)
  data$y = as.numeric(data$y)
  data$id = as.numeric(data$id)
  data$gen_inf = as.numeric(data$gen_inf)
  data$gen_rec = as.numeric(data$gen_rec)
  return(data)
  
}


place_dots = function(data,size=100){
  
  if(size<dim(data)[1]) stop("Not enough space! Try again with a bigger size.")
  
  
  for(i in 1:dim(data)[1]){
    data[i,"x"] = sample(0:size, 1)
    data[i,"y"] = sample(0:size, 1)
  }
  
  data
}


seed_dots = function(data,numinf=1){
  
  data$status = "S"
  data$gen_inf = -1
  data$gen_rec = -1
  
  select = sample(1:dim(data)[1],numinf)
  
  for(i in 1:dim(data)[1]){
    if(data[i,"id"] %in% select){
      data[i,"status"] = "I"
      data[i,"gen_inf"] = 0
    }
  }
  
  return(data)
}

move_dots = function(data,size=100,movement=5){
  
  for(i in 1:dim(data)[1]){
    new_x = data[i,"x"]+sample(-movement:movement,1)
    new_y = data[i,"y"]+sample(-movement:movement,1)
    if(new_x>size){
      new_x = size
    }
    if(new_x<0){
      new_x = 0
    }
    if(new_y>size){
      new_y = size
    }
    if(new_y<0){
      new_y = 0
    }
    data[i,"x"] = new_x
    data[i,"y"] = new_y
  }
  
  data
}


update_dots = function(data,gen=0,p){
  
  for(i in 1:dim(data)[1]){
    for(j in 1:dim(data)[1]){
      if(data[i,"status"] == "I" && data[j,"status"] == "S"){
        x1 = data[i,"x"]
        x2 = data[j,"x"]
        y1 = data[i,"y"]
        y2 = data[j,"y"]
        dist = sqrt((x1-x2)^2+(y1-y2)^2)
        if(dist<p["inf_dist"]){
          val = 1/(1+(dist/p["offset"])^p["power"])
          if(p["beta"]*val>runif(1)){
            data[j,"status"] = "I"
            data[j,"gen_inf"] = gen
          }
        }
      }
    }
    if(data[i,"status"]=="I"){
      if(rbinom(1,1,1/p["recover"])==1){
        data[i,"status"] = "R"
        data[i,"gen_rec"] = gen
      }
    }
  }
  data
}


plot_dots = function(data,size=100){
  
  subdata = data[data$status=="I",]
  subdata2 = data[data$status=="R",]
  plot(x=data$x,y=data$y,pch=19,col="blue", xlab="X coordinates", ylab="Y coordinates",ylim=c(0,size),xlim=c(0,size))
  text(data$y~data$x,labels=as.character(data$id),pos=3,cex=0.7)
  points(subdata$x,subdata$y,pch=19,col="red")
  points(subdata2$x,subdata2$y,pch=19,col="green")
  legend("topright", legend=c("S","I","R"), col=c("blue","red","green"), pch=19)
}


simulate_dots = function(data,p,cont_plot=T){
  
  data = place_dots(data,p["size"])
  data = seed_dots(data,p["numinf"])
  gen = 0
  check = 0
  
  if(cont_plot==F){
    par(mfrow=c(1,2))
    plot_dots(data,p["size"])
    title(main="Beginning of the epidemic")
  }
  
  while(length(which(data$status=="I"))<dim(data)[1] && length(which(data$status=="I"))!=0){
    
    gen = gen+1
    data = move_dots(data,p["size"],p["movement"])
    data = update_dots(data,gen,p)
    if(cont_plot==T){
      plot_dots(data,p["size"])
      title(main=paste0("Gen: ", gen, ", infected: ", round(1-(length(which(data$status=="S")))/dim(data)[1],2)*100,"%"))
    }
    #Sys.sleep(0.06)
  }
  
  plot_dots(data,p["size"])
  title(main=paste0("End, total infected: ", round(1-(length(which(data$status=="S")))/dim(data)[1],2)*100, "%, gen: ", gen))
  par(mfrow=c(1,1))
  
  return(data)
  
}


simulate_multiple_dots = function(data,p,times){
  
  average_inf = 0
  
  for(i in 1:times){
    print(i)
    data = simulate_dots(data,p)
    average_inf[i] = round(1-(length(which(data$status=="S")))/dim(data)[1],2)*100
  }
  
  assign("average_inf", average_inf, .GlobalEnv)
  print(paste0("Average infected %: ", mean(average_inf)))
  hist(average_inf)
  
}


plot_dots_epidemic = function(data,params){
  time = as.numeric(c(0:max(data$gen_rec)))
  inf = 0
  inf[1] = as.numeric(params["numinf"])
  
  for(i in 1:max(data$gen_rec)){
      inf[i+1] = inf[i] + length(which(data$gen_inf==i)) - length(which(data$gen_rec==i))
  }
  plot(time,inf,type="l",xlab="Time",ylab="Number of infected")
  title(main="Epidemic curve")
}


dots_kernel = function(dist,p){
  val = 0
  if(dist<p["inf_dist"]){
  val = p["beta"]*1/(1+(dist/p["offset"])^p["power"])
  }
  val
}


